 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var mongo = require("mongodb").MongoClient;
var dbPath = process.env.DBPATH;

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
      var ip = req.connection.remoteAddress;
      res.sendFile(process.cwd() + '/views/index.html');
    })

//  Grab a param if it's given
app.route('/new/*')
  .get(function(req, res) {
    var original_url = req.params[0];
    if (!original_url.startsWith('http://') && !original_url.startsWith('https://')) {
      res.status(500).send({ error: 'Invalid format. Make sure URL begins with "http://" or "https://"' });
      //  Break out of this logic
      res.next();
    }
    mongo.connect(process.env.DB_PATH, function(err, db) {
      if (err) throw err;
      var urlsCol = db.collection('urls');
      
      //  Ad-hoc function that will be called once 'urls.count' returns (see below)
      //  Why: We need the db document count before we can generate short_url
      var doInsert = function(count) {
        var newEntry = {
          original_url : original_url,
          short_url : 'https://sam-shorten.glitch.me/' + count.toString()
        };
        urlsCol.insert( newEntry, function(err, stuff) {
          db.close();
          res.send({ original_url : newEntry.original_url, short_url : newEntry.short_url });
        });
      }
      
      urlsCol.count( {}, function(err, count) {
        if (err) throw err;
        console.log(count);
        doInsert(count);
      });

    });
});

app.route('/:urlParam')
  .get(function(req, res) {
    var shortened_url = 'https://sam-shorten.glitch.me/' + req.params.urlParam;
    mongo.connect(process.env.DB_PATH, function(err, db) {
      if (err) throw err;
      var urlsCol = db.collection('urls');
      
      urlsCol.find({
          short_url : { $eq : shortened_url }
        }).toArray(function(err, documents) {
          if (err) throw err;
          res.writeHead(302, {
            'Location': documents[0].original_url
          });
          res.end();
      });
      
    });
});

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

